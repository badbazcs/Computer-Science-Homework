import pygame
import sys
import time
import random

# Initialize Pygame
pygame.init()

# Game settings
screen_width = 800
screen_height = 600
screen = pygame.display.set_mode((screen_width, screen_height))
pygame.display.set_caption("Moving Character Game")

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
YELLOW = (255, 255, 0)
BLOCK_COLOR = (100, 100, 100)  # Gray color for blocking objects

# Fonts
font = pygame.font.SysFont('Arial', 30)

# Character settings
char_width = 50
char_height = 50
char_x = screen_width // 2 - char_width // 2
char_y = screen_height - char_height - 10
char_speed = 5

# Bullet settings
bullet_width = 5
bullet_height = 10
bullet_speed = 7
bullets = []
last_shot_time = 0  # To manage the reload timer (0.4 seconds)

# Enemy settings
enemy_radius = 20
enemy_spacing = 100  # Horizontal space between enemies
enemy_y = 50
rows = 3  # Number of rows of enemies
cols = 8  # Number of columns of enemies
enemies = []

# Block settings
blocks = []  # List of blocking objects
block_hits = {i: 0 for i in range(3)}  # Track hits for each block

# Score variable
score = 0

# Timer settings
game_time = 60  # Game duration in seconds
time_left = game_time  # Countdown timer

# Enemy bullets
enemy_bullets = []

# Start menu settings
menu_running = True
game_running = False

# Function to display text
def draw_text(text, font, color, x, y):
    text_surface = font.render(text, True, color)
    screen.blit(text_surface, (x, y))

# Bullet class to store bullet data
class Bullet:
    def __init__(self, x, y, color=GREEN):
        self.x = x
        self.y = y
        self.width = bullet_width
        self.height = bullet_height
        self.color = color

    def move(self):
        self.y -= bullet_speed

    def draw(self):
        pygame.draw.rect(screen, self.color, (self.x, self.y, self.width, self.height))

    def off_screen(self):
        return self.y < 0 or self.y > screen_height

    def hit_enemy(self, enemy):
        return pygame.Rect(self.x, self.y, self.width, self.height).colliderect(enemy)

    def hit_block(self, block):
        return pygame.Rect(self.x, self.y, self.width, self.height).colliderect(block)

# Function to draw enemies
def draw_enemies():
    for enemy in enemies:
        pygame.draw.circle(screen, YELLOW, (enemy['x'], enemy['y']), enemy_radius)

# Function to spawn enemies
def spawn_enemies():
    global enemies
    enemies = []  # Clear current enemies
    for row in range(rows):
        for col in range(cols):
            x = col * enemy_spacing + 50  # 50px offset for neat alignment
            y = row * (enemy_radius * 2) + 50  # 50px offset for neat alignment
            enemies.append({'x': x, 'y': y})

# Function to move enemies down and add new row at top
def move_enemies_down():
    global enemies
    # Move all enemies down
    for enemy in enemies:
        enemy['y'] += 30  # Move enemies down by 30 pixels

    # Add a new row of enemies at the top
    if len(enemies) > 0 and enemies[0]['y'] > enemy_y:
        spawn_enemies()  # Re-spawn enemies at the top
        enemies = enemies[len(enemies)//2:]  # Remove half of the current enemies to simulate the movement

# Block class for destructible obstacles
class Block:
    def __init__(self, x, y, width, height):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.hit_count = 0

    def draw(self):
        pygame.draw.rect(screen, BLOCK_COLOR, (self.x, self.y, self.width, self.height))

    def shrink(self):
        self.width *= 0.75
        self.height *= 0.75
        self.hit_count += 1

    def is_destroyed(self):
        return self.hit_count >= 5

# Function to spawn blocks
def spawn_blocks():
    blocks.append(Block(200, 400, 100, 30))
    blocks.append(Block(350, 400, 100, 30))
    blocks.append(Block(500, 400, 100, 30))

# Move enemy bullets and check for collisions with player or blocks
def move_enemy_bullets():
    global score
    for bullet in enemy_bullets[:]:
        bullet.move()
        bullet.draw()
        if bullet.off_screen():
            enemy_bullets.remove(bullet)

        # Check for collision with player
        if pygame.Rect(char_x, char_y, char_width, char_height).colliderect(pygame.Rect(bullet.x, bullet.y, bullet.width, bullet.height)):
            score -= 10  # Deduct score if player gets hit
            enemy_bullets.remove(bullet)

        # Check for collision with blocks
        for block in blocks:
            if pygame.Rect(block.x, block.y, block.width, block.height).colliderect(pygame.Rect(bullet.x, bullet.y, bullet.width, bullet.height)):
                block.shrink()  # Shrink the block
                enemy_bullets.remove(bullet)  # Remove bullet
                if block.is_destroyed():
                    blocks.remove(block)  # Destroy block after 5 hits
                break

# Function to make enemies shoot at player
def enemy_shoot():
    for enemy in enemies:
        if random.random() < 0.01:  # 1% chance for each enemy to shoot
            bullet = Bullet(enemy['x'], enemy['y'], color=RED)
            enemy_bullets.append(bullet)

# Main game loop
def game_loop():
    global char_x, char_y, game_running, last_shot_time, score, enemies, time_left, blocks
    clock = pygame.time.Clock()
    start_time = time.time()  # To track the game duration
    last_move_time = time.time()  # To track when enemies should move down

    while game_running:
        screen.fill(WHITE)

        # Event handling
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

        # Move character
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT] and char_x > 0:
            char_x -= char_speed
        if keys[pygame.K_RIGHT] and char_x < screen_width - char_width:
            char_x += char_speed

        # Check for mouse button press to shoot with reload time
        mouse_pressed = pygame.mouse.get_pressed()
        current_time = time.time()
        if mouse_pressed[0] and (current_time - last_shot_time > 0.4):  # Reduced cooldown to 0.4s
            bullet = Bullet(char_x + char_width // 2 - bullet_width // 2, char_y)  # Start from character's position
            bullets.append(bullet)
            last_shot_time = current_time  # Reset the last shot time

        # Move and draw bullets
        for bullet in bullets[:]:
            bullet.move()
            bullet.draw()
            if bullet.off_screen():
                bullets.remove(bullet)

            # Check for collisions with enemies
            for enemy in enemies[:]:
                enemy_rect = pygame.Rect(enemy['x'] - enemy_radius, enemy['y'] - enemy_radius, 2 * enemy_radius, 2 * enemy_radius)
                if bullet.hit_enemy(enemy_rect):
                    bullets.remove(bullet)  # Remove bullet
                    enemies.remove(enemy)  # Remove enemy
                    score += 10  # Increase score by 10
                    break

        # Move enemies down and add new row
        if current_time - last_move_time >= 5:
            move_enemies_down()
            last_move_time = current_time

        # Make enemies shoot at the player
        enemy_shoot()

        # Move and draw enemy bullets
        move_enemy_bullets()

        # Draw the character (a red square)
        pygame.draw.rect(screen, RED, (char_x, char_y, char_width, char_height))

        # Draw enemies
        draw_enemies()

        # Draw blocks
        for block in blocks:
            block.draw()

        # Timer: update and draw
        time_elapsed = time.time() - start_time
        time_left = max(0, game_time - int(time_elapsed))
        draw_text(f"Time: {time_left}s", font, BLACK, screen_width - 120, 10)

        # Display the score
        draw_text(f"Score: {score}", font, BLACK, screen_width // 2 - 60, screen_height // 2)

        # If time runs out, end the game
        if time_left == 0:
            draw_text("Game Over!", font, BLACK, screen_width // 3, screen_height // 2)
            pygame.display.flip()
            time.sleep(2)
            game_running = False
            break

        # Update screen
        pygame.display.flip()
        clock.tick(60)

# Start menu loop
def start_menu():
    global game_running, menu_running
    clock = pygame.time.Clock()

    while menu_running:
        screen.fill(WHITE)
        draw_text("Press Enter to Start", font, BLACK, screen_width // 3, screen_height // 3)
        draw_text("Press Q to Quit", font, BLACK, screen_width // 3, screen_height // 2)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_RETURN:
                    spawn_enemies()  # Initialize enemies at the start of the game
                    spawn_blocks()  # Spawn blocks
                    game_running = True
                    menu_running = False
                    game_loop()  # Start the game loop
                if event.key == pygame.K_q:
                    pygame.quit()
                    sys.exit()

        pygame.display.flip()
        clock.tick(60)

# Start the game from the start menu
start_menu()
